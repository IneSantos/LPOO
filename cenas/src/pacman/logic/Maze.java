package pacman.logic;

import pacman.GUI.GameEngine;

public class Maze {

	public char maze[][] =  {
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' , ' ' , ' ', ' ', ' ' , ' ' , ' ' , ' ' , ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' , ' ' , ' ', ' ', ' ' , ' ' , ' ' , ' ' , ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' , ' ' , ' ', ' ', ' ' , ' ' , ' ' , ' ' , ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{ 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , 'X' , 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
		{ 'X', '.', '.', '.', '.', '.', 'D', '.', '.', '.', '.', '.' , '.' , 'X', 'X', '.' , '.' , '.' , '.' , '.', '.', 'D', '.', '.', '.', '.', '.', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X' , '.' , 'X', 'X', '.' , 'X' , 'X' , 'X' , 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', 'P', 'X', ' ', ' ', 'X', '.', 'X', ' ', ' ', ' ', 'X' , '.' , 'X', 'X', '.' , 'X' , ' ' , ' ' , ' ', 'X', '.', 'X', ' ', ' ', 'X', 'P', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X' , '.' , 'X', 'X', '.' , 'X' , 'X' , 'X' , 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', 'D', '.', '.', '.', '.', 'D', '.', '.', 'D', '.', '.' , 'D' , '.', '.', 'D' , '.' , '.' , 'D' , '.', '.', 'D', '.', '.', '.', '.', 'D', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , '.' , 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , '.' , 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', '.', '.', '.', '.', '.', 'D', 'X', 'X', '.', '.', '.' , '.' , 'X', 'X', '.' , '.' , '.' , '.' , 'X', 'X', 'D', '.', '.', '.', '.', '.', 'X'},
		{ 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X' , ' ' , 'X', 'X', ' ' , 'X' , 'X' , 'X' , 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X'},
		{ ' ', ' ', ' ', ' ', ' ', 'X', '.', 'X', 'X', 'X', 'X', 'X' , ' ' , 'X', 'X', ' ' , 'X' , 'X' , 'X' , 'X', 'X', '.', 'X', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', 'X', '.', 'X', 'X', ' ', ' ', ' ' , 'i' , ' ', ' ', 'i' , ' ' , ' ' , ' ' , 'X', 'X', '.', 'X', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', 'X', '.', 'X', 'X', ' ', 'X', 'X' , 'X' , 'S', 'S', 'X' , 'X' , 'X' , ' ' , 'X', 'X', '.', 'X', ' ', ' ', ' ', ' ', ' '},
		{ 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X', 'X', ' ', 'X', ' ' , ' ' , ' ', ' ', ' ' , ' ' , 'X' , ' ' , 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X'},
		{ ' ', ' ', ' ', ' ', ' ', ' ', 'D', ' ', ' ', 'd', 'X', ' ' , ' ' , ' ', ' ', ' ' , ' ' , 'X' , 'd' , ' ', ' ', 'D', ' ', ' ', ' ', ' ', ' ', ' '},
		{ 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X', 'X', ' ', 'X', ' ' , ' ' , ' ', ' ', ' ' , ' ' , 'X' , ' ' , 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X'},
		{ ' ', ' ', ' ', ' ', ' ', 'X', '.', 'X', 'X', ' ', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , ' ' , 'X', 'X', '.', 'X', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', 'X', '.', 'X', 'X', 'd', ' ', ' ' , ' ' , ' ', ' ', ' ' , ' ' , ' ' , 'd' , 'X', 'X', '.', 'X', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', 'X', '.', 'X', 'X', ' ', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , ' ' , 'X', 'X', '.', 'X', ' ', ' ', ' ', ' ', ' '},
		{ 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X', 'X', ' ', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , ' ' , 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X'},
		{ 'X', '.', '.', '.', '.', '.', 'D', '.', '.', 'D', '.', '.' , '.' , 'X', 'X', '.' , '.' , '.' , '.' , '.', '.', '.', '.', '.', '.', '.', '.', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X' , '.' , 'X', 'X', '.' , 'X' , 'X' , 'X' , 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X' , '.' , 'X', 'X', '.' , 'X' , 'X' , 'X' , 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', 'P', '.', '.', 'X', 'X', 'D', '.', '.', 'D', '.', '.' , 'I' , '.', '.', 'I' , '.' , '.' , 'D' , '.', '.', 'D', 'X', 'X', '.', '.', 'P', 'X'},
		{ 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , '.' , 'X', 'X', '.', 'X', 'X', '.', 'X', 'X', 'X'},
		{ 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , '.' , 'X', 'X', '.', 'X', 'X', '.', 'X', 'X', 'X'},
		{ 'X', '.', '.', 'D', '.', '.', '.', 'X', 'X', '.', '.', '.' , '.' , 'X', 'X', '.' , '.' , '.' , '.' , 'X', 'X', '.', '.', '.', 'D', '.', '.', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' , '.' , 'X', 'X', '.' , 'X' , 'X' , 'X' , 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' , '.' , 'X', 'X', '.' , 'X' , 'X' , 'X' , 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X'},
		{ 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' , 'D' , '.', '.', 'D' , '.' , '.' , '.' , '.', '.', '.', '.', '.', '.', '.', '.', 'X'},
		{ 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' , 'X' , 'X', 'X', 'X' , 'X' , 'X' , 'X' , 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' , ' ' , ' ', ' ', ' ' , ' ' , ' ' , ' ' , ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' , ' ' , ' ', ' ', ' ' , ' ' , ' ' , ' ' , ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}};

	
	public boolean isWall(Position p)
	{
		if(maze[p.y][p.x] == 'X')
			return true;
		return false;
	}
	
	public boolean isPoint(Position p)
	{
		if(p.x > 0 && p.x < Game.mazeWidth)
			if(maze[p.y][p.x] == '.' || maze[p.y][p.x] == 'D' || maze[p.y][p.x] == 'I')
				return true;
		return false;
	}
	
	public boolean isPowerPoint(Position p)
	{
		if(p.x > 0 && p.x < Game.mazeWidth)
			if(maze[p.y][p.x] == 'P')
				return true;
		return false;
	}
	
	public boolean isDoor(Position p)
	{
		if(maze[p.y][p.x] == 'S')
			return true;
		return false;
	}
	
	//GHOST
	
	public boolean isDecisionPoint(Position p)
	{
		if(p.x > 0 && p.x < Game.mazeWidth)
			if(maze[p.y][p.x] == 'D' || maze[p.y][p.x] == 'd')
				return true;
		
		return false;
	}
	
	public boolean isIntPoint(Position p)
	{
		if(p.x >= 0 && p.x <= Game.mazeWidth)
			if(maze[p.y][p.x] == 'I' || maze[p.y][p.x] == 'i')
				return true;
		
		return false;
	}
	
}
